/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './pages/__root';
import { Route as SecuredImport } from './pages/_secured';
import { Route as IndexImport } from './pages/index';
import { Route as HomeIndexImport } from './pages/home/index';
import { Route as Error500IndexImport } from './pages/error-500/index';
import { Route as Error404IndexImport } from './pages/error-404/index';
import { Route as SecuredUsersIndexImport } from './pages/_secured/users/index';
import { Route as SecuredTokensIndexImport } from './pages/_secured/tokens/index';
import { Route as SecuredMetricsIndexImport } from './pages/_secured/metrics/index';
import { Route as SecuredMachinesIndexImport } from './pages/_secured/machines/index';
import { Route as SecuredAclLayoutImport } from './pages/_secured/acl/_layout';
import { Route as SecuredAclLayoutIndexImport } from './pages/_secured/acl/_layout/index';
import { Route as SecuredAclLayoutPreviewImport } from './pages/_secured/acl/_layout/preview';
import { Route as SecuredAclLayoutEditFileImport } from './pages/_secured/acl/_layout/edit-file';

// Create Virtual Routes

const SecuredAclImport = createFileRoute('/_secured/acl')();

// Create/Update Routes

const SecuredRoute = SecuredImport.update({
  id: '/_secured',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const SecuredAclRoute = SecuredAclImport.update({
  id: '/acl',
  path: '/acl',
  getParentRoute: () => SecuredRoute,
} as any);

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any);

const Error500IndexRoute = Error500IndexImport.update({
  id: '/error-500/',
  path: '/error-500/',
  getParentRoute: () => rootRoute,
} as any);

const Error404IndexRoute = Error404IndexImport.update({
  id: '/error-404/',
  path: '/error-404/',
  getParentRoute: () => rootRoute,
} as any);

const SecuredUsersIndexRoute = SecuredUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => SecuredRoute,
} as any);

const SecuredTokensIndexRoute = SecuredTokensIndexImport.update({
  id: '/tokens/',
  path: '/tokens/',
  getParentRoute: () => SecuredRoute,
} as any);

const SecuredMetricsIndexRoute = SecuredMetricsIndexImport.update({
  id: '/metrics/',
  path: '/metrics/',
  getParentRoute: () => SecuredRoute,
} as any);

const SecuredMachinesIndexRoute = SecuredMachinesIndexImport.update({
  id: '/machines/',
  path: '/machines/',
  getParentRoute: () => SecuredRoute,
} as any);

const SecuredAclLayoutRoute = SecuredAclLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => SecuredAclRoute,
} as any);

const SecuredAclLayoutIndexRoute = SecuredAclLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SecuredAclLayoutRoute,
} as any);

const SecuredAclLayoutPreviewRoute = SecuredAclLayoutPreviewImport.update({
  id: '/preview',
  path: '/preview',
  getParentRoute: () => SecuredAclLayoutRoute,
} as any);

const SecuredAclLayoutEditFileRoute = SecuredAclLayoutEditFileImport.update({
  id: '/edit-file',
  path: '/edit-file',
  getParentRoute: () => SecuredAclLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_secured': {
      id: '/_secured';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof SecuredImport;
      parentRoute: typeof rootRoute;
    };
    '/error-404/': {
      id: '/error-404/';
      path: '/error-404';
      fullPath: '/error-404';
      preLoaderRoute: typeof Error404IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/error-500/': {
      id: '/error-500/';
      path: '/error-500';
      fullPath: '/error-500';
      preLoaderRoute: typeof Error500IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/home/': {
      id: '/home/';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_secured/acl': {
      id: '/_secured/acl';
      path: '/acl';
      fullPath: '/acl';
      preLoaderRoute: typeof SecuredAclImport;
      parentRoute: typeof SecuredImport;
    };
    '/_secured/acl/_layout': {
      id: '/_secured/acl/_layout';
      path: '/acl';
      fullPath: '/acl';
      preLoaderRoute: typeof SecuredAclLayoutImport;
      parentRoute: typeof SecuredAclRoute;
    };
    '/_secured/machines/': {
      id: '/_secured/machines/';
      path: '/machines';
      fullPath: '/machines';
      preLoaderRoute: typeof SecuredMachinesIndexImport;
      parentRoute: typeof SecuredImport;
    };
    '/_secured/metrics/': {
      id: '/_secured/metrics/';
      path: '/metrics';
      fullPath: '/metrics';
      preLoaderRoute: typeof SecuredMetricsIndexImport;
      parentRoute: typeof SecuredImport;
    };
    '/_secured/tokens/': {
      id: '/_secured/tokens/';
      path: '/tokens';
      fullPath: '/tokens';
      preLoaderRoute: typeof SecuredTokensIndexImport;
      parentRoute: typeof SecuredImport;
    };
    '/_secured/users/': {
      id: '/_secured/users/';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof SecuredUsersIndexImport;
      parentRoute: typeof SecuredImport;
    };
    '/_secured/acl/_layout/edit-file': {
      id: '/_secured/acl/_layout/edit-file';
      path: '/edit-file';
      fullPath: '/acl/edit-file';
      preLoaderRoute: typeof SecuredAclLayoutEditFileImport;
      parentRoute: typeof SecuredAclLayoutImport;
    };
    '/_secured/acl/_layout/preview': {
      id: '/_secured/acl/_layout/preview';
      path: '/preview';
      fullPath: '/acl/preview';
      preLoaderRoute: typeof SecuredAclLayoutPreviewImport;
      parentRoute: typeof SecuredAclLayoutImport;
    };
    '/_secured/acl/_layout/': {
      id: '/_secured/acl/_layout/';
      path: '/';
      fullPath: '/acl/';
      preLoaderRoute: typeof SecuredAclLayoutIndexImport;
      parentRoute: typeof SecuredAclLayoutImport;
    };
  }
}

// Create and export the route tree

interface SecuredAclLayoutRouteChildren {
  SecuredAclLayoutEditFileRoute: typeof SecuredAclLayoutEditFileRoute;
  SecuredAclLayoutPreviewRoute: typeof SecuredAclLayoutPreviewRoute;
  SecuredAclLayoutIndexRoute: typeof SecuredAclLayoutIndexRoute;
}

const SecuredAclLayoutRouteChildren: SecuredAclLayoutRouteChildren = {
  SecuredAclLayoutEditFileRoute: SecuredAclLayoutEditFileRoute,
  SecuredAclLayoutPreviewRoute: SecuredAclLayoutPreviewRoute,
  SecuredAclLayoutIndexRoute: SecuredAclLayoutIndexRoute,
};

const SecuredAclLayoutRouteWithChildren =
  SecuredAclLayoutRoute._addFileChildren(SecuredAclLayoutRouteChildren);

interface SecuredAclRouteChildren {
  SecuredAclLayoutRoute: typeof SecuredAclLayoutRouteWithChildren;
}

const SecuredAclRouteChildren: SecuredAclRouteChildren = {
  SecuredAclLayoutRoute: SecuredAclLayoutRouteWithChildren,
};

const SecuredAclRouteWithChildren = SecuredAclRoute._addFileChildren(
  SecuredAclRouteChildren,
);

interface SecuredRouteChildren {
  SecuredAclRoute: typeof SecuredAclRouteWithChildren;
  SecuredMachinesIndexRoute: typeof SecuredMachinesIndexRoute;
  SecuredMetricsIndexRoute: typeof SecuredMetricsIndexRoute;
  SecuredTokensIndexRoute: typeof SecuredTokensIndexRoute;
  SecuredUsersIndexRoute: typeof SecuredUsersIndexRoute;
}

const SecuredRouteChildren: SecuredRouteChildren = {
  SecuredAclRoute: SecuredAclRouteWithChildren,
  SecuredMachinesIndexRoute: SecuredMachinesIndexRoute,
  SecuredMetricsIndexRoute: SecuredMetricsIndexRoute,
  SecuredTokensIndexRoute: SecuredTokensIndexRoute,
  SecuredUsersIndexRoute: SecuredUsersIndexRoute,
};

const SecuredRouteWithChildren =
  SecuredRoute._addFileChildren(SecuredRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof SecuredRouteWithChildren;
  '/error-404': typeof Error404IndexRoute;
  '/error-500': typeof Error500IndexRoute;
  '/home': typeof HomeIndexRoute;
  '/acl': typeof SecuredAclLayoutRouteWithChildren;
  '/machines': typeof SecuredMachinesIndexRoute;
  '/metrics': typeof SecuredMetricsIndexRoute;
  '/tokens': typeof SecuredTokensIndexRoute;
  '/users': typeof SecuredUsersIndexRoute;
  '/acl/edit-file': typeof SecuredAclLayoutEditFileRoute;
  '/acl/preview': typeof SecuredAclLayoutPreviewRoute;
  '/acl/': typeof SecuredAclLayoutIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof SecuredRouteWithChildren;
  '/error-404': typeof Error404IndexRoute;
  '/error-500': typeof Error500IndexRoute;
  '/home': typeof HomeIndexRoute;
  '/acl': typeof SecuredAclLayoutIndexRoute;
  '/machines': typeof SecuredMachinesIndexRoute;
  '/metrics': typeof SecuredMetricsIndexRoute;
  '/tokens': typeof SecuredTokensIndexRoute;
  '/users': typeof SecuredUsersIndexRoute;
  '/acl/edit-file': typeof SecuredAclLayoutEditFileRoute;
  '/acl/preview': typeof SecuredAclLayoutPreviewRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_secured': typeof SecuredRouteWithChildren;
  '/error-404/': typeof Error404IndexRoute;
  '/error-500/': typeof Error500IndexRoute;
  '/home/': typeof HomeIndexRoute;
  '/_secured/acl': typeof SecuredAclRouteWithChildren;
  '/_secured/acl/_layout': typeof SecuredAclLayoutRouteWithChildren;
  '/_secured/machines/': typeof SecuredMachinesIndexRoute;
  '/_secured/metrics/': typeof SecuredMetricsIndexRoute;
  '/_secured/tokens/': typeof SecuredTokensIndexRoute;
  '/_secured/users/': typeof SecuredUsersIndexRoute;
  '/_secured/acl/_layout/edit-file': typeof SecuredAclLayoutEditFileRoute;
  '/_secured/acl/_layout/preview': typeof SecuredAclLayoutPreviewRoute;
  '/_secured/acl/_layout/': typeof SecuredAclLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/error-404'
    | '/error-500'
    | '/home'
    | '/acl'
    | '/machines'
    | '/metrics'
    | '/tokens'
    | '/users'
    | '/acl/edit-file'
    | '/acl/preview'
    | '/acl/';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/error-404'
    | '/error-500'
    | '/home'
    | '/acl'
    | '/machines'
    | '/metrics'
    | '/tokens'
    | '/users'
    | '/acl/edit-file'
    | '/acl/preview';
  id:
    | '__root__'
    | '/'
    | '/_secured'
    | '/error-404/'
    | '/error-500/'
    | '/home/'
    | '/_secured/acl'
    | '/_secured/acl/_layout'
    | '/_secured/machines/'
    | '/_secured/metrics/'
    | '/_secured/tokens/'
    | '/_secured/users/'
    | '/_secured/acl/_layout/edit-file'
    | '/_secured/acl/_layout/preview'
    | '/_secured/acl/_layout/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  SecuredRoute: typeof SecuredRouteWithChildren;
  Error404IndexRoute: typeof Error404IndexRoute;
  Error500IndexRoute: typeof Error500IndexRoute;
  HomeIndexRoute: typeof HomeIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SecuredRoute: SecuredRouteWithChildren,
  Error404IndexRoute: Error404IndexRoute,
  Error500IndexRoute: Error500IndexRoute,
  HomeIndexRoute: HomeIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_secured",
        "/error-404/",
        "/error-500/",
        "/home/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_secured": {
      "filePath": "_secured.tsx",
      "children": [
        "/_secured/acl",
        "/_secured/machines/",
        "/_secured/metrics/",
        "/_secured/tokens/",
        "/_secured/users/"
      ]
    },
    "/error-404/": {
      "filePath": "error-404/index.tsx"
    },
    "/error-500/": {
      "filePath": "error-500/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/_secured/acl": {
      "filePath": "_secured/acl",
      "parent": "/_secured",
      "children": [
        "/_secured/acl/_layout"
      ]
    },
    "/_secured/acl/_layout": {
      "filePath": "_secured/acl/_layout.tsx",
      "parent": "/_secured/acl",
      "children": [
        "/_secured/acl/_layout/edit-file",
        "/_secured/acl/_layout/preview",
        "/_secured/acl/_layout/"
      ]
    },
    "/_secured/machines/": {
      "filePath": "_secured/machines/index.tsx",
      "parent": "/_secured"
    },
    "/_secured/metrics/": {
      "filePath": "_secured/metrics/index.tsx",
      "parent": "/_secured"
    },
    "/_secured/tokens/": {
      "filePath": "_secured/tokens/index.tsx",
      "parent": "/_secured"
    },
    "/_secured/users/": {
      "filePath": "_secured/users/index.tsx",
      "parent": "/_secured"
    },
    "/_secured/acl/_layout/edit-file": {
      "filePath": "_secured/acl/_layout/edit-file.tsx",
      "parent": "/_secured/acl/_layout"
    },
    "/_secured/acl/_layout/preview": {
      "filePath": "_secured/acl/_layout/preview.tsx",
      "parent": "/_secured/acl/_layout"
    },
    "/_secured/acl/_layout/": {
      "filePath": "_secured/acl/_layout/index.tsx",
      "parent": "/_secured/acl/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
